// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Days {
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
}

enum InterviewType {
  OBJECTIVE
  THEORY
  PRACTICAL
}

enum InterviewPhase {
  TEST
  VIDEO_CHAT
  COMPLETED
}

enum InterviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model User {
  id                   Int                       @id @default(autoincrement())
  name                 String
  email                String                    @unique
  phone                String?                   @unique
  image                String
  bio                  String?
  gender               String
  saves                Int[]
  verified             Boolean                   @default(false)
  courses              UserCourse[]
  password             String
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  transactions         Transaction[]
  forgotPassword       ForgotPassword?
  userVerification     UserVerification?
  phoned               Boolean?                  @default(false)
  notifications        Notification[]            @relation("UserNotifications")
  whatsappVerification UserWhatsappVerification?
  status               String                    @default("offline")
}

model UserCourse {
  userId   Int    @map("user_id")
  user     User   @relation(fields: [userId], references: [id])
  courseId Int    @map("course_id")
  course   Course @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
}

model Course {
  id               Int           @id @default(autoincrement())
  title            String
  description      String
  instructorId     Int
  instructor       Instructor    @relation(fields: [instructorId], references: [id])
  categoryId       Int
  category         Category      @relation(fields: [categoryId], references: [id]) // Many courses to one category
  price            BigInt
  duration         Int
  start            DateTime
  end              DateTime
  thumbnail        String        @default("course.jpg")
  enrollment_limit Int
  users            UserCourse[]
  timetable        Timetable[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  transactions     Transaction[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Instructor {
  id             Int                             @id @default(autoincrement())
  name           String
  email          String                          @unique
  phone          String?                         @unique
  major          String
  bio            String?
  image          String?
  gender         String
  dob            DateTime
  age            Int?
  courses        Course[]
  timetable      Timetable[]
  password       String
  verified       Boolean                         @default(false)
  access         Boolean                         @default(false)
  createdAt      DateTime                        @default(now())
  updatedAt      DateTime                        @updatedAt
  verification   InstructorVerification?
  approval       InstructorApproval?
  forgotpassword InstructForgotPassword?
  phoned         Boolean?                        @default(false)
  adminId        Int?
  admin          Admin?                          @relation(fields: [adminId], references: [id])
  notifications  Notification[]                  @relation("InstructorNotifications")
  whatsapp       InstructorWhatsappVerification?
  transactions   Transaction[]
  interview      Interview?
}

model InstructorApproval {
  id           Int        @id @default(autoincrement())
  instructorId Int        @unique
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  certificate  String
  youtube      String
  website      String
  tiktok       String?
  interview    String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Interview {
  id            Int             @id @default(autoincrement())
  name          String
  instructorId  Int             @unique
  instructor    Instructor      @relation(fields: [instructorId], references: [id])
  type          InterviewType
  phase         InterviewPhase
  status        InterviewStatus
  objectiveTest ObjectiveTest?
  theoryTest    TheoryTest?
  practicalTest PracticalTest?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Question {
  id              Int           @id @default(autoincrement())
  objectiveTestId Int           @unique
  objectiveTest   ObjectiveTest @relation(fields: [objectiveTestId], references: [id])
  text            String
  options         Option[]
  correctOption   Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Option {
  id         Int      @id @default(autoincrement())
  text       String
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
}

model ObjectiveTest {
  id          Int        @id @default(autoincrement())
  interviewId Int        @unique
  interview   Interview  @relation(fields: [interviewId], references: [id])
  questions   Question[]
  score       Float?
  passed      Boolean?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model TheoryTest {
  id          Int       @id @default(autoincrement())
  interviewId Int       @unique
  interview   Interview @relation(fields: [interviewId], references: [id])
  assignment  String // Description of the assignment
  submission  String? // URL or path to the submitted work
  score       Float?
  passed      Boolean?
}

model PracticalTest {
  id             Int       @id @default(autoincrement())
  interviewId    Int       @unique
  interview      Interview @relation(fields: [interviewId], references: [id])
  projectDetails String // Description of the project
  submission     String? // URL to the GitHub repository or project link
  score          Float?
  passed         Boolean?
}

model Timetable {
  id           Int        @id @default(autoincrement())
  instructorId Int
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  courseId     Int
  course       Course     @relation(fields: [courseId], references: [id])
  start        String
  end          String
  duration     Int
  day          Days
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ForgotPassword {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
  token     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiredAt DateTime?
  used      Boolean   @default(false)

  @@unique([userId, token])
}

model InstructForgotPassword {
  id           Int        @id @default(autoincrement())
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  instructorId Int        @unique
  token        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  expiredAt    DateTime?
  used         Boolean    @default(false)

  @@unique([instructorId, token])
}

model AdminForgotPassword {
  id        Int       @id @default(autoincrement())
  admin     Admin     @relation(fields: [adminId], references: [id])
  adminId   Int       @unique
  token     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiredAt DateTime?
  used      Boolean   @default(false)

  @@unique([adminId, token])
}

model UserVerification {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiredAt DateTime?
  used      Boolean   @default(false)

  @@unique([userId, token])
}

model UserWhatsappVerification {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiredAt DateTime?
  used      Boolean   @default(false)

  @@unique([userId, token])
}

model InstructorWhatsappVerification {
  id           Int        @id @default(autoincrement())
  instructorId Int        @unique
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  token        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  expiredAt    DateTime?
  used         Boolean    @default(false)

  @@unique([instructorId, token])
}

model AdminWhatsappVerification {
  id        Int       @id @default(autoincrement())
  adminId   Int       @unique
  admi      Admin     @relation(fields: [adminId], references: [id])
  token     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiredAt DateTime?
  used      Boolean   @default(false)

  @@unique([adminId, token])
}

model InstructorVerification {
  id           Int        @id @default(autoincrement())
  instructorId Int        @unique
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  token        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  expiredAt    DateTime?
  used         Boolean    @default(false)

  @@unique([instructorId, token])
}

model AdminVerification {
  id        Int       @id @default(autoincrement())
  adminId   Int       @unique
  admin     Admin     @relation(fields: [adminId], references: [id])
  token     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiredAt DateTime?
  used      Boolean   @default(false)

  @@unique([adminId, token])
}

model Transaction {
  id           Int        @id @default(autoincrement())
  courseId     Int        @map("course_id")
  course       Course     @relation(fields: [courseId], references: [id])
  userId       Int        @map("user_id")
  user         User       @relation(fields: [userId], references: [id])
  instructorId Int        @map("instructor_id")
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  amount       BigInt
  status       String     @default("pending")
  ref          String
  purpose      String?    @default("Course payment")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Admin {
  id             Int                        @id @default(autoincrement())
  name           String?
  email          String                     @unique
  phone          String?                    @unique
  password       String
  role           String                     @default("admin")
  gender         String
  image          String?
  bio            String?
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  verified       Boolean?                   @default(false)
  phoned         Boolean?                   @default(false)
  notifications  Notification[]             @relation("AdminNotifications")
  Instructor     Instructor[]
  verification   AdminVerification?
  forgotpassword AdminForgotPassword?
  whatsapp       AdminWhatsappVerification?
}

model Notification {
  id            Int           @id @default(autoincrement())
  message       String
  personnelId   Int
  personnelType PersonnelType
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  User          User?         @relation("UserNotifications", fields: [userId], references: [id])
  userId        Int?
  Instructor    Instructor?   @relation("InstructorNotifications", fields: [instructorId], references: [id])
  instructorId  Int?
  Admin         Admin?        @relation("AdminNotifications", fields: [adminId], references: [id])
  adminId       Int?

  @@index([personnelId, personnelType])
}

enum PersonnelType {
  USER
  INSTRUCTOR
  ADMIN
}
